{"version":3,"sources":["components/comment.js","components/newCommentAdd.js","containers/vidgetCommentsApp.js","actions/index.js","reducers/doVidgetComments.js","index.js"],"names":["Comment","props","comments","delComment","className","map","comment","key","name","text","date","aria-label","onClick","event","NewCommentAdd","newName","newText","addComment","addNewName","addNewText","onSubmit","type","placeholder","required","value","onChange","VidgetCommentsApp","connect","state","dispatch","preventDefault","target","DoVidgetComments","action","s","length","getDate","d","Date","getDay","getMonth","getFullYear","getHours","getMinutes","localStorage","setItem","JSON","stringify","forEach","initialState","getItem","parse","store","createStore","doVidgetComments","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc28dc90.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Comment = props => {\r\n  let { comments, delComment } = props;\r\n   \r\n  return (\r\n    <ul className=\"comments-list\">\r\n      {\r\n        comments.map(comment => {\r\n          return (\r\n            <li className=\"comments-list__comment\" key = {comment.key}>\r\n              <h3 className=\"comments-list__name\"> {comment.name} </h3>\r\n\r\n              <p className=\"comments-list__text\"> {comment.text}</p>\r\n\r\n              <time className=\"comments-list__time\"> {comment.date} </time>\r\n              \r\n              <button className=\"comments-list__button\" aria-label=\"Кнопка удалить\" onClick={event => {delComment(comment.key)}} />\r\n            </li>\r\n          )\r\n        })           \r\n      }\r\n    </ul>   \r\n  )          \r\n} \r\n\r\nexport default Comment;","import React from 'react';\r\n\r\nconst NewCommentAdd = ({ newName, newText, addComment, addNewName, addNewText }) => {\r\n  return ( \r\n    <form className=\"new-comment\" onSubmit={event => addComment(event)}>\r\n      <fieldset className=\"new-comment__fieldset\">\r\n        <legend className=\"new-comment__legend\">\r\n          <h2 className=\"new-comment__title\">Новый коментарий</h2>\r\n        </legend>\r\n    \r\n        <input className=\"new-comment__name\" type=\"text\" placeholder=\"Ваше имя\" required value={newName} onChange={event => addNewName(event)}  />           \r\n\r\n        <textarea className=\"new-comment__text\" placeholder=\"Введите коментарий\" required value={newText} onChange={event => addNewText(event)} />\r\n\r\n        <button className=\"new-comment__btn\" type=\"submit\">Добавить</button>\r\n      </fieldset>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default NewCommentAdd;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './style.css';\r\n\r\nimport Comment from '../components/comment';\r\nimport NewCommentAdd from '../components/newCommentAdd';\r\nimport { addComment, delComment, addNewName, addNewText } from '../actions';\r\n\r\nlet VidgetCommentsApp = (props) => {   \r\n  const { comments, newName, newText, addComment, delComment, addNewName, addNewText } = props;\r\n  return (\r\n    <div className=\"vidget-comments\">\r\n      <h1>Виджет комментариев</h1>\r\n\r\n      <NewCommentAdd newName = {newName} newText = {newText} addComment = {addComment} addNewName = {addNewName} addNewText = {addNewText} />\r\n      \r\n      <Comment comments = {comments} delComment = {delComment}/>\r\n    </div> \r\n  )         \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    comments: state.comments,\r\n    newName: state.newName,\r\n    newText: state.newText,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addComment: (name, text) => dispatch(addComment(name, text)),\r\n    delComment: (key) => dispatch(delComment(key)),\r\n    addNewName: (newName) => dispatch(addNewName(newName)),\r\n    addNewText: (newText) => dispatch(addNewText(newText)),\r\n  }\r\n}\r\n\r\nVidgetCommentsApp = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(VidgetCommentsApp);\r\n\r\nexport default VidgetCommentsApp;","export const addComment = event => {     \r\n  event.preventDefault(); \r\n  return {\r\n    type: 'ADD_COMMENT',\r\n  }\r\n}\r\n\r\nexport const delComment = key => {\r\n  return {\r\n    type: 'DEL_COMMENT',\r\n    key,        \r\n  }\r\n}\r\n\r\nexport const addNewName = event => {    \r\n  return {\r\n    type: 'ADD_NEW_NAME',\r\n    newName: event.target.value,\r\n  }\r\n}\r\n\r\nexport const addNewText = event => {\r\n  return {\r\n    type: 'ADD_NEW_TEXT',\r\n    newText: event.target.value,\r\n  }\r\n} \r\n\r\n\r\n","const DoVidgetComments = (state = [], action) => {\r\n  const comments = state.comments;\r\n  let s =[];\r\n  let key = (comments.length === 0) ? 0 : (comments[0].key+1);\r\n\r\n  const getDate = () => {\r\n    let d = new Date();\r\n    return (( d.getDay()<10 ? d.getDay()+10 : d.getDay() ) + '.' + ( d.getMonth()+1<10 ? '0'+(d.getMonth()+1) : d.getMonth()+1 ) + '.' + d.getFullYear() + ' ' + d.getHours() + ':' + d.getMinutes());\r\n  }\r\n\r\n  switch(action.type) {\r\n    case 'ADD_COMMENT':\r\n      s = [{ key: key, name: state.newName, text: state.newText, date: getDate() }, ...comments];\r\n      \r\n      localStorage.setItem('commentsList', JSON.stringify(s)); \r\n      \r\n      return (                \r\n        {\r\n          comments: s,\r\n          newName: '',\r\n          newText: '',\r\n        }\r\n      )\r\n\r\n    case 'DEL_COMMENT': \r\n      comments.forEach((comment) => {\r\n        if (comment.key !== action.key) {                        \r\n          s = [...s, comment]                 \r\n        } \r\n      }); \r\n      \r\n      localStorage.setItem('commentsList', JSON.stringify(s)); \r\n      \r\n      return {\r\n        comments: s,\r\n        newName: state.newName,\r\n        newText: state.newText,\r\n      }\r\n\r\n    case 'ADD_NEW_NAME':\r\n      return {\r\n        comments: comments,\r\n        newName: action.newName,\r\n        newText: state.newText,\r\n      }\r\n\r\n    case 'ADD_NEW_TEXT':\r\n      return {\r\n        comments: comments,\r\n        newName: state.newName,\r\n        newText: action.newText,\r\n      }    \r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default DoVidgetComments;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore } from 'redux';\n\nimport VidgetCommentsApp from './containers/vidgetCommentsApp';\nimport  doVidgetComments from './reducers/doVidgetComments';\n\nlet initialState = {\n  comments: [],\n  newName: '',\n  newText: '',\n}\n\nif (localStorage.getItem('commentsList') && localStorage.getItem('commentsList') !== \"[]\") {\n  initialState.comments = JSON.parse(localStorage.getItem('commentsList'));  \n};\n\nconst store = createStore(doVidgetComments, initialState);\n\nReactDOM.render(\n  <React.StrictMode>\n    <VidgetCommentsApp store={ store } />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}